#!/usr/bin/env bash

usage='usage: tmux-run <session-name> \
  [-h|--help] \
  [[-l|--layout=]{number}] \              # [default: generated to match number of commands provided] each digit represents number of panes in column
  [[-o|--orientation=]ttb|ltr] \          # [default: ttb (top-to-bottom)] transpose layout if orientation=ltr (left-to-right)
  [[-e|--exists=]replace|attach|error] \  # [default: replace] exists when session already exists
  [--extra="tmux cmd A ; tmux cmd B"] \   # extra tmux commands to be executed after window and panes are created
  ["shell command 1"] \                   # shell commands that will be executed in each pane
  ["shell command 2"] \
  ...
  ["shell command N"]                     # number of shell commands N must not exceed sum of layout
'

# --help
if [[ $1 =~ ^(--help|-h)$ ]]; then
  echo "$usage"
  exit 0
fi

# parse args into vars:
session=""      # required - session name
layout=""       # optional - string of digits defining a custom layout
                #            each digit represents num of panes in each column
orientation=""  # optional - ttb (top-to-bottom, default) or ltr (left-to-right)
                #            if ltr, transpose layout into rows instead of columns
exists=""       # optional - attach/replace/error exists when session exists
extra=""        # optional - extra commands to be executed after layout commands
                #            e.g. extra="set-window-option remain-on-exit off"

# 1st arg: session name
session="$1"
shift

# 2nd arg: layout (string of digits)
if [[ $1 =~ ^--layout= ]] || [[ $1 =~ ^(--layout|-l)?=?[0-9]+$ ]]; then
  layout="$1"
  shift
  layout="${layout#"--layout"}"  # remove prefix (if necessary)
  layout="${layout#"-l"}"
  layout="${layout#"="}"
  # if layout invalid, exit with error
  if ! [[ $layout =~ ^[0-9]+$ ]]; then
    echo "invalid input: --layout=$layout cannot contain non-numeric characters"
    echo "$usage"
    exit 1
  fi
  # if layout contains zero, exit with error
  if [[ $layout =~ 0 ]]; then
    echo "invalid input: --layout=$layout column cannot be set to zero"
    echo "$usage"
    exit 1
  fi
fi

# 3rd arg: orientation [ltr|ttb] default:ttb
orientation=$(echo "$1" | awk '{print tolower($0)}')
if [[ $1 =~ ^--orientation= ]] || [[ $1 =~ ^(--orientation|-o)?=?(ttb|ltr)$ ]]; then
  orientation="$1"
  shift
  orientation="${orientation#"--orientation"}"  # remove prefix (if necessary)
  orientation="${orientation#"-o"}"
  orientation="${orientation#"="}"
  if ! [[ $orientation =~ ^(ttb|ltr)$ ]]; then
    echo "invalid input: --orientation must be [ttb|ltr]"
    echo "$usage"
    exit 1
  fi
fi
if [[ -z $orientation ]]; then
  # default
  orientation="ttb"
fi

# 4th arg: exists [replace|attach|error] default:replace
if [[ $1 =~ ^--exists= ]] || [[ $1 =~ ^(--exists|-e)?=?(replace|attach|error)$ ]]; then
  exists="$1"
  shift
  exists="${exists#"--exists"}"  # remove prefix (if necessary)
  exists="${exists#"-e"}"
  exists="${exists#"="}"
  if ! [[ $exists =~ ^(replace|attach|error)$ ]]; then
    echo "invalid input: --exists must be [replace|attach|error]"
    echo "$usage"
    exit 1
  fi
fi
if [[ -z $exists ]]; then
  # default
  exists="replace"
fi

# 5th arg: extra
if [[ $1 =~ ^--extra=? ]]; then
  extra="$1"
  shift
  extra="${extra#"--extra"}"  # remove prefix
  extra="${extra#"="}"
fi

numcmds="$#"

# if layout is not set, generate a default for number of commands:
# numcmds:1 -> layout:"1"
# numcmds:2 -> layout:"11"
# numcmds:3 -> layout:"12"
# numcmds:4 -> layout:"22"
# numcmds:5 -> layout:"122"
# numcmds:6 -> layout:"222"
# numcmds:7 -> layout:"1222"
# numcmds:8 -> layout:"233"
# ...
if [[ -z $layout ]]; then
  root=$( bc <<< "scale=0; sqrt($numcmds+1)" )
  root=${root%.*}  # floor
  quot=$(( $numcmds / $root ))
  quot=${quot%.*}  # floor
  rmdr=$(( $numcmds % $root ))
  layout=$( printf "%0.s$root" $( seq 1 $quot ) )
  if (( $rmdr > 0 )); then
    layout="$rmdr$layout"
  fi
fi

# if number of commands exceeds sum of layout string digits, exit with error
layoutsum=0
for (( i = 0; i < ${#layout}; i++ )); do (( layoutsum += ${layout:i:1} )); done
if (( $numcmds > $layoutsum )); then
  echo "invalid input: --layout=$layout is too small for number of commands provided"
  echo "$usage"
  exit 1
fi

if [[ $exists == "attach" ]]; then
  tmux has-session -t $session 2>/dev/null
  if [ $? == 0 ]; then  # if session exists, re-attach
    tmux attach-session -t $session
    exit 0
  fi
elif [[ $exists == "replace" ]]; then
  tmux kill-session -t "$session" || true  # ignore 'session does not exist' error
fi

cmds=("$@")
tmuxcmd="tmux new-session -s \"$session\" \"${cmds[0]}\""

splitpane () {
  local direction="$1"
  shift
  local numpanes="$1"
  shift
  local cmds=( "$@" )

  if (( $numpanes >= 2 )); then
    if (( $numpanes == 2 )); then
      tmuxcmd+=" \\; split-window -$direction \"${cmds[1]}\""
    elif (( $numpanes % 2 > 0 )); then
      # percentage = round(100 - (100 / $numpanes))
      local percentage=$(( 100 - ( ( 100 + ( $numpanes / 2 ) ) / $numpanes ) ))
      tmuxcmd+=" \\; split-window -$direction -p$percentage \"${cmds[1]}\""
      splitpane $direction $(( $numpanes - 1 )) "${cmds[@]:1}"
    else
      local half=$(( $numpanes / 2 ))
      tmuxcmd+=" \\; split-window -$direction -d \"${cmds[$half]}\""
      splitpane $direction $half "${cmds[@]:0:half}"  # 1st half of commands
      [[ $direction == "v" ]] && flag="D" || flag="R"
      tmuxcmd+=" \\; select-pane -$flag"
      splitpane $direction $half "${cmds[@]:half}"    # 2nd half of commands
    fi
  fi
}

# construct initial set of column panes (or row panes if orientation="ltr")
topcmds=()
colsum=0
numcols=${#layout}
for (( i = 0; i < $numcols; i++ )); do
  col=${layout:i:1}
  topcmds+=( "${cmds[$colsum]}" )
  (( colsum+=$col ))
done
[[ $orientation == "ltr" ]] && direction="v" || direction="h"
splitpane $direction $numcols "${topcmds[@]}"

# select first column pane (or row pane if orientation="ltr")
tmuxcmd+=" \\; select-pane -t0"

# split each column pane as specified by layout (or row panes if orientation="ltr")
colsum=0
for (( i = 0; i < ${#layout}; i++ )); do
  col=${layout:i:1}
  [[ $orientation == "ltr" ]] && direction="h" || direction="v"
  splitpane $direction $col "${cmds[@]:$colsum:col}"
  [[ $orientation == "ltr" ]] && flag="D" || flag="R"
  tmuxcmd+=" \\; select-pane -$flag"
  (( colsum+=$col ))
done

# append extra tmux commands as specified by `extra` arg
tmuxcmd+=" \\; set-window-option remain-on-exit on"
tmuxcmd+=" \\; ${extra//;/\\\\;}"  # escape semicolons - replace ";" with "\\;"

eval $tmuxcmd
