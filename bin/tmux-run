#!/usr/bin/env bash

# parse args into vars:
session=""      # required - session name
behavior=""     # optional - attach/replace/error behavior when session already exists
layout=""       # optional - string of digits defining a custom layout - each digit represents num of panes in each column
orientation=""  # optional - "ttb" (top-to-bottom, default) or "ltr" (left-to-right). If "ltr", transpose layout into rows instead of columns
options=""      # optional - extra tmux window options that will be set for the session

# 1st arg: session name
session="$1"
shift

# 2nd arg: behavior [replace-existing|attach-existing|error-existing] default:replace-existing
behavior=$(echo "$1" | awk '{print tolower($0)}')
if [[ $behavior = "replace-existing" ]]; then
  shift
elif [[ $behavior = "attach-existing" ]]; then
  shift
elif [[ $behavior = "error-existing" ]]; then
  shift
else
  # default
  behavior="replace-existing"
fi
echo $behavior

# 3rd arg: layout (string of digits)
if [[ $1 =~ ^[0-9]+$ ]]; then
  layout="$1"
  shift

  # if layout contains zero, exit with error
  if [[ $layout =~ "0" ]]; then
    echo "layout column cannot be set to zero"
    exit 1
  fi
fi

# 4th arg: orientation [ltr|ttb] default:ttb
orientation=$(echo "$1" | awk '{print tolower($0)}')
if [[ $orientation = "ltr" ]]; then
  shift
elif [[ $orientation = "ttb" ]]; then
  shift
else
  # default
  orientation="ttb"
fi

# 5th arg: options (json string)
if jq -e . >/dev/null 2>&1 <<< "$1"; then
  options="$1"
  shift
else
  # default
  options='{
    "remain-on-exit": "on"
  }'
fi

numcmds="$#"

# if layout is not set, generate a default for number of commands:
# numcmds:1 -> layout:"1"
# numcmds:2 -> layout:"11"
# numcmds:3 -> layout:"12"
# numcmds:4 -> layout:"22"
# numcmds:5 -> layout:"122"
# numcmds:6 -> layout:"222"
# numcmds:7 -> layout:"1222"
# numcmds:8 -> layout:"233"
# ...
if [[ -z $layout ]]; then
  root=$(bc <<< "scale=0; sqrt($numcmds+1)")
  root=${root%.*}  # floor
  quot=$(($numcmds / $root))
  quot=${quot%.*}  # floor
  rmdr=$(($numcmds % $root))
  layout=$(printf "%0.s$root" $(seq 1 $quot))
  if (( $rmdr > 0 )); then
    layout="$rmdr$layout"
  fi
fi

# if number of commands exceeds sum of layout string digits, exit with error
layoutsum=0
for (( i = 0; i < ${#layout}; i++ )); do (( layoutsum += ${layout:i:1} )); done
if (( $numcmds > $layoutsum )); then
  echo "layout is too small for number of commands provided"
  exit 1
fi

if [[ $behavior = "attach-existing" ]]; then
  tmux has-session -t $session 2>/dev/null
  if [ $? == 0 ]; then  # if session exists, re-attach
    tmux attach-session -t $session
    exit 0
  fi
elif [[ $behavior = "replace-existing" ]]; then
  tmux kill-session -t "$session" || true  # ignore 'session does not exist' error
fi

dir="$(dirname "$(readlink "$0")")"  # ensure dir refers to original script not symlink
eval $($dir/../layout.py "$session" "$options" "$layout" "$orientation" "$@")
